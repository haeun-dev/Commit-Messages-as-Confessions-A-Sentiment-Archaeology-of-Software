[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codemood"
version = "0.1.0"
description = "Analyze code mood from git repository commits using sentiment analysis"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "codemood team", email = "team@codemood.dev"},
]
keywords = ["git", "sentiment-analysis", "code-analysis", "visualization", "mood"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dependencies = [
    "transformers>=4.21.0",
    "torch>=1.12.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "wordcloud>=1.9.0",
    "pandas>=1.4.0",
    "numpy>=1.21.0",
    "requests>=2.28.0",
    "streamlit>=1.20.0",
    "plotly>=5.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
openai = [
    "openai>=1.0.0",
]
all = [
    "codemood[dev,openai]",
]

[project.urls]
Homepage = "https://github.com/codemood/codemood"
Repository = "https://github.com/codemood/codemood"
Documentation = "https://codemood.readthedocs.io"
"Bug Tracker" = "https://github.com/codemood/codemood/issues"

[project.scripts]
codemood = "cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "cli*", "moodmap*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "wordcloud.*",
    "streamlit.*",
    "plotly.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["core", "cli", "moodmap"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
